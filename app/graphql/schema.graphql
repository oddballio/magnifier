# Autogenerated return type of CreateStatisticMutation
type CreateStatisticMutationPayload {
  errors: [String!]

  # The statistic just added
  statistic: Statistic
}

type GithubUser {
  apiUrl: String
  avatarUrl: String
  createdAt: String!
  githubId: Int!
  githubLogin: String!
  htmlUrl: String
  id: Int!
  oddballEmployee: Boolean!

  # This GithubUser's statistics, or null if this GithubUser has no statistics.
  statistics: [Statistic!]
  updatedAt: String!
  userId: Int
}

type Mutation {
  # Creates a Statistic with the passed data.
  createStatistic(attributes: StatisticInput!): CreateStatisticMutationPayload

  # Updates a Statistic with the passed data.
  updateStatistic(attributes: StatisticInput!, id: Int!): UpdateStatisticMutationPayload
}

type Organization {
  createdAt: String!
  id: Int!
  name: String!

  # This organization's repositories, or null if this organization has no repositories.
  repositories: [Repository!]
  updatedAt: String!
  url: String!
}

type Query {
  # The Github User with the passed criteria.
  githubUser(githubLogin: String, id: ID): GithubUser!

  # All Github Users.
  githubUsers(limit: Int): [GithubUser!]!

  # The Logged in user
  me: User

  # The organization with the passed criteria.
  organization(id: ID, name: String): Organization!

  # All organizations.
  organizations(limit: Int): [Organization!]!

  # All repositories.
  repositories(limit: Int): [Repository!]!

  # The repository with the passed criteria.
  repository(id: ID, name: String): Repository!

  # The statistic with the passed criteria.
  statistic(id: ID, sourceId: String): Statistic!

  # All statistics.
  statistics(limit: Int): [Statistic!]!

  # The User with the passed criteria.
  user(githubUsername: String, id: ID): User!

  # All Users.
  users(limit: Int): [User!]!
}

type Repository {
  createdAt: String!
  id: Int!
  name: String!
  organization: Organization!
  updatedAt: String!
  url: String!
}

type Statistic {
  assignees: [Int!]
  createdAt: String!

  # This Statistic's GithubUsers, or null if this Statistic has no GithubUsers.
  githubUsers: [GithubUser!]
  id: Int!

  # This Statistic's Organization
  organization: Organization!
  organizationId: Int!

  # This Statistic's Repository.
  repository: Repository!
  repositoryId: Int!
  source: String!
  sourceClosedAt: String
  sourceCreatedAt: String
  sourceCreatedBy: Int!
  sourceId: String!
  sourceType: String!
  sourceUpdatedAt: String
  state: String!
  title: String!
  updatedAt: String!
  url: String!
}

# Attributes for creating or updating a Statistic.
input StatisticInput {
  organizationId: Int!
  repositoryId: Int!
  source: String!
  sourceClosedAt: String
  sourceCreatedAt: String!
  sourceId: String!
  sourceType: String!
  sourceUpdatedAt: String!
  state: String!
  title: String!
  url: String!
}

# During a query, defines the relationship between the Statistic and associated
# GithubUser.  Whether the user created the statistic, or is assigned to it.
enum StatisticOwnershipEnum {
  # GithubUser is assigned to the statistic
  ASSIGNED

  # GithubUser created the statistic
  CREATED
}

# The source type of the statistics
enum StatisticSourceTypeEnum {
  # An issue
  ISSUE

  # A pull request
  PR
}

# The state of the statistics
enum StatisticStatesEnum {
  # A closed statistic
  CLOSED

  # A merged statistic
  MERGED

  # An open statistic
  OPEN
}

# Autogenerated return type of UpdateStatisticMutation
type UpdateStatisticMutationPayload {
  errors: [String!]

  # The statistic just added
  statistic: Statistic
}

type User {
  createdAt: String!
  email: String!
  firstName: String!
  githubUsername: String!
  id: Int!
  lastName: String!
  updatedAt: String!
}